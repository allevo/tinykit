AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for tinykit
Parameters:
  AppId:
    Type: String
    Description: A unique name for the deployment
  SenderEmail:
    Type: String
    Description: The email address to send emails from
Globals:
  Function:
    Timeout: 3
    MemorySize: 256
    LoggingConfig:
      LogFormat: JSON
Resources:
  ResourcesBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub tinykit-${AppId}-rewards
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: aws:kms
  CampaignsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub tinykit-${AppId}-campaigns
      KeySchema:
        - AttributeName: campaign_id
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: campaign_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
  SubscriptionsTable:
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TableName: !Sub tinykit-${AppId}-subscriptions
      KeySchema:
        - AttributeName: campaign_id
          KeyType: HASH
        - AttributeName: subscription_id
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: campaign_id
          AttributeType: S
        - AttributeName: subscription_id
          AttributeType: S
      BillingMode: PAY_PER_REQUEST
  EmailQueue:
    Type: AWS::SQS::Queue
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      QueueName: !Sub tinykit-${AppId}-email
      MessageRetentionPeriod: 345600
      VisibilityTimeout: 240
  FormRenderingFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/form_rendering
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        FormRender:
          Type: HttpApi
          Properties:
            Path: /form/{campaign_id}
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CampaignsTable
      Environment:
        Variables:
          CAMPAIGNS_TABLE: !Ref CampaignsTable
  SubscribeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/subscribe
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        FormRequest:
          Type: HttpApi
          Properties:
            Path: /form/{campaign_id}
            Method: post
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CampaignsTable
        - DynamoDBWritePolicy:
            TableName: !Ref SubscriptionsTable
        - SQSSendMessagePolicy:
            QueueName: !GetAtt EmailQueue.QueueName
      Environment:
        Variables:
          CAMPAIGNS_TABLE: !Ref CampaignsTable
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          EMAIL_QUEUE: !GetAtt EmailQueue.QueueUrl
  SendConfirmationFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/send_confirmation
      Handler: bootstrap
      Runtime: provided.al2023
      Timeout: 120
      Architectures:
        - arm64
      Events:
        EmailQueueProcessing:
          Type: SQS
          Properties:
            Queue: !GetAtt EmailQueue.Arn
            BatchSize: 10
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CampaignsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - SESBulkTemplatedCrudPolicy:
            IdentityName: !Ref SenderEmail
      Environment:
        Variables:
          CAMPAIGNS_TABLE: !Ref CampaignsTable
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          SENDER_EMAIL: !Ref SenderEmail

  ConfirmSubscriptionFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/confirm_subscription
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        FormRequest:
          Type: HttpApi
          Properties:
            Path: /subscription/{subscription_id}/confirm
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref CampaignsTable
        - DynamoDBCrudPolicy:
            TableName: !Ref SubscriptionsTable
        - S3ReadPolicy:
            BucketName: !Ref ResourcesBucket
      Environment:
        Variables:
          CAMPAIGNS_TABLE: !Ref CampaignsTable
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
          RESOURCES_BUCKET: !Ref ResourcesBucket
  EmailOpenedFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/email_opened
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        FormRequest:
          Type: HttpApi
          Properties:
            Path: /subscription/{subscription_id}/opened
            Method: get
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SubscriptionsTable
      Environment:
        Variables:
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
  UnsubscribeFunction:
    Type: AWS::Serverless::Function
    Metadata:
      BuildMethod: rust-cargolambda
    Properties:
      CodeUri: ./lambdas/unsubscribe
      Handler: bootstrap
      Runtime: provided.al2023
      Architectures:
        - arm64
      Events:
        FormRequest:
          Type: HttpApi
          Properties:
            Path: /subscription/{subscription_id}/unsubscribe
            Method: get
      Policies:
        - DynamoDBWritePolicy:
            TableName: !Ref SubscriptionsTable
      Environment:
        Variables:
          SUBSCRIPTIONS_TABLE: !Ref SubscriptionsTable
Outputs:
  APIPrefix:
    Description: API Gateway endpoint URL for Prod stage for Hello World function
    Value: !Sub https://${ServerlessHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
